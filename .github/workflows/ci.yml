name: CI

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  DB_HOST: 127.0.0.1
  DB_USER: chat
  DB_PASSWORD: chat
  DB_NAME: chat
  REDIS_ADDR: 127.0.0.1:6379
  FRONTEND_ORIGIN: '*'

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
          check-latest: true
          cache: true

      - name: Run unit tests with coverage
        run: |
          go test ./... -coverpkg=./... -covermode=atomic -coverprofile=coverage.out
          test -s coverage.out || (echo "coverage.out not found"; exit 1)

      - name: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: 1.23
          check-latest: true
          go-package: ./...
          output-format: text
          cache: false

      - name: Generate & commit coverage badge
        if: github.ref_name == 'main'
        run: |
          go install github.com/kyoh86/coverbadge/cmd/coverbadge@latest
          coverbadge -o coverage.svg coverage.out
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add coverage.svg
          if ! git diff --cached --quiet; then
            git commit -m "chore: update coverage badge [skip ci]"
            git push
          fi

      - name: Generate HTML coverage report
        if: hashFiles('coverage.out') != ''
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        if: hashFiles('coverage.out') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            coverage.svg
            coverage.html

  integration:
    if: github.event_name != 'pull_request'
    needs: unit
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: chat
          POSTGRES_USER: chat
          POSTGRES_DB: chat
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U chat"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
          check-latest: true
          cache: true

      - name: Install redis-cli
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends redis-tools

      - name: Wait for DB / Redis
        run: |
          until pg_isready -h localhost -U $DB_USER; do sleep 2; done
          until redis-cli -h localhost ping; do sleep 2; done

      - name: Run unit + integration tests
        run: go test -tags=integration ./...
